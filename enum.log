commit 2ef6ab90296665495aa7711db3792448760e2ab0
Author: Pawan Khatri <pawan@bluestacks.com>
Date:   Tue May 3 17:08:17 2016 +0530

    print enums as strings in logs using PGASTR

diff --git a/emulator/opengl/host/tools/emugen/ApiGen.cpp b/emulator/opengl/host/tools/emugen/ApiGen.cpp
index 177490091..ba814b2f6 100644
--- a/emulator/opengl/host/tools/emugen/ApiGen.cpp
+++ b/emulator/opengl/host/tools/emugen/ApiGen.cpp
@@ -245,7 +245,8 @@ int ApiGen::genEntryPoints(const std::string & filename, SideType side)
         fprintf(fp, ")\\n\", gettid(), __FUNCTION__");
         for (size_t j = 0; j < nvars; j++) {
             if (!e->vars()[j].isVoid()) {
-                fprintf(fp, ", %s", e->vars()[j].name().c_str());
+                bool isEnum = e->vars()[j].isEnum();
+                fprintf(fp, ", %s%s%s", isEnum?"PGASTR(":"", e->vars()[j].name().c_str(), isEnum?")":"");
             }
         }
 
@@ -286,8 +287,12 @@ int ApiGen::genEntryPoints(const std::string & filename, SideType side)
             fprintf(fp, ");\n");
 
             if (shouldReturn) {
-                fprintf(fp, "\tPGA_TRACE(\"tid %%d: %%s: returning %s\\n\", gettid(), __FUNCTION__, retval);\n",
-                        e->retval().type()->printFormat().c_str());
+                if (e->retval().isEnum())
+                    fprintf(fp, "\tPGA_TRACE(\"tid %%d: %%s: returning %s\\n\", gettid(), __FUNCTION__, PGASTR(retval));\n",
+                            e->retval().type()->printFormat().c_str());
+                else
+                    fprintf(fp, "\tPGA_TRACE(\"tid %%d: %%s: returning %s\\n\", gettid(), __FUNCTION__, retval);\n",
+                            e->retval().type()->printFormat().c_str());
                 fprintf(fp, "\treturn retval;\n");
             }
         }
@@ -620,7 +625,8 @@ int ApiGen::genEncoderImpl(const std::string &filename)
         fprintf(fp, ")\\n\", gettid(), __FUNCTION__");
         for (size_t j = 0; j < nvars; j++) {
             if (!e->vars()[j].isVoid()) {
-                fprintf(fp, ", %s", e->vars()[j].name().c_str());
+                bool isEnum = e->vars()[j].isEnum();
+                fprintf(fp, ", %s%s%s", isEnum?"PGASTR(":"", e->vars()[j].name().c_str(), isEnum?")":"");
             }
         }
         fprintf(fp, ");\n");
@@ -815,14 +821,15 @@ int ApiGen::genEncoderImpl(const std::string &filename)
         if (e->retval().isPointer()) {
             fprintf(fp, ")\\n\", gettid(), __FUNCTION__");
         } else if (e->retval().type()->name() != "void") {
-            fprintf(fp, ")\\n\", gettid(), retval, __FUNCTION__");
+            fprintf(fp, ")\\n\", gettid(), %s, __FUNCTION__", e->retval().isEnum() ? "PGASTR(retval)" : "retval");
         } else {
             fprintf(fp, ")\\n\", gettid(), __FUNCTION__");
         }
 
         for (size_t j = 0; j < nvars; j++) {
             if (!e->vars()[j].isVoid()) {
-                fprintf(fp, ", %s", e->vars()[j].name().c_str());
+                bool isEnum = e->vars()[j].isEnum();
+                fprintf(fp, ", %s%s%s", isEnum?"PGASTR(":"", e->vars()[j].name().c_str(), isEnum?")":"");
             }
         }
         fprintf(fp, ");\n");
@@ -1026,7 +1033,9 @@ int ApiGen::genDecoderImpl(const std::string &filename)
 
                     if (!v->isPointer()) {
                         if (pass == PASS_FunctionCall || pass == PASS_DebugPrint) {
+                            if (pass == PASS_DebugPrint && v->isEnum()) fprintf(fp, "PGASTR(");
                             fprintf(fp, "*(%s *)(ptr + %s)", v->type()->name().c_str(), varoffset.c_str());
+                            if (pass == PASS_DebugPrint && v->isEnum()) fprintf(fp, ")");
                         }
                         varoffset += " + " + toString(v->type()->bytes());
                     } else {
@@ -1106,9 +1115,14 @@ int ApiGen::genDecoderImpl(const std::string &filename)
 
             if (pass == PASS_Epilog) {
                 if (!e->retval().isVoid() && !e->retval().isPointer()) {
-                    fprintf(fp, "\t\tPGA_TRACE(\"%s returning (%s)\\n\", *(%s *)(&tmpBuf[%s]));\n",
-                            e->name().c_str(), e->retval().type()->printFormat().c_str(),
-                            retvalType.c_str(), totalTmpBuffOffset.c_str());
+                    if (e->retval().isEnum())
+                        fprintf(fp, "\t\tPGA_TRACE(\"%s returning (%s)\\n\", PGASTR(*(%s *)(&tmpBuf[%s])));\n",
+                                e->name().c_str(), e->retval().type()->printFormat().c_str(),
+                                retvalType.c_str(), totalTmpBuffOffset.c_str());
+                    else
+                        fprintf(fp, "\t\tPGA_TRACE(\"%s returning (%s)\\n\", *(%s *)(&tmpBuf[%s]));\n",
+                                e->name().c_str(), e->retval().type()->printFormat().c_str(),
+                                retvalType.c_str(), totalTmpBuffOffset.c_str());
 
                 } else {
                     fprintf(fp, "\t\tPGA_TRACE(\"%s returning\\n\");\n", e->name().c_str());
diff --git a/emulator/opengl/host/tools/emugen/TypeFactory.cpp b/emulator/opengl/host/tools/emugen/TypeFactory.cpp
index bbc1488d7..fe893fdbf 100644
--- a/emulator/opengl/host/tools/emugen/TypeFactory.cpp
+++ b/emulator/opengl/host/tools/emugen/TypeFactory.cpp
@@ -50,18 +50,18 @@ static VarConverter * getVarConverter(int size)
     return v;
 }
 
-#define ADD_TYPE(name, size, printformat,ispointer)                                           \
-    g_varMap.insert(std::pair<std::string, VarType>(name, VarType(g_typeId++, name, &g_var##size , printformat , ispointer)));
+#define ADD_TYPE(name, size, printformat,ispointer, isEnum)                                           \
+    g_varMap.insert(std::pair<std::string, VarType>(name, VarType(g_typeId++, name, &g_var##size , printformat , ispointer, isEnum)));
 
 void TypeFactory::initBaseTypes()
 {
     g_initialized = true;
-    ADD_TYPE("UNKNOWN", 0, "0x%x", false);
-    ADD_TYPE("void", 0, "0x%x", false);
-    ADD_TYPE("char", 8, "%c", false);
-    ADD_TYPE("int", 32, "%d", false);
-    ADD_TYPE("float", 32, "%d", false);
-    ADD_TYPE("short", 16, "%d", false);
+    ADD_TYPE("UNKNOWN", 0, "0x%x", false, false);
+    ADD_TYPE("void", 0, "0x%x", false, false);
+    ADD_TYPE("char", 8, "%c", false, false);
+    ADD_TYPE("int", 32, "%d", false, false);
+    ADD_TYPE("float", 32, "%d", false, false);
+    ADD_TYPE("short", 16, "%d", false, false);
 }
 
 int TypeFactory::initFromFile(const std::string &filename)
@@ -124,6 +124,11 @@ int TypeFactory::initFromFile(const std::string &filename)
           return -2;
         }
 
+        bool isEnum = false;
+        if (!strcmp ((const char*)name.c_str(), "GLenum") ||
+                !strcmp ((const char*)name.c_str(), "EGLenum"))
+            isEnum = true;
+
         VarConverter *v = getVarConverter(atoi(size.c_str()));
         if (v == NULL) {
             fprintf(stderr, "Error: %d : unknown var width: %d\n", lc, atoi(size.c_str()));
@@ -135,9 +140,9 @@ int TypeFactory::initFromFile(const std::string &filename)
                     "Warining: %d : type %s is already known, definition in line %d is taken\n",
                     lc, name.c_str(), lc);
         }
-        g_varMap.insert(std::pair<std::string, VarType>(name, VarType(g_typeId++, name, v ,printString,isPointer)));
+        g_varMap.insert(std::pair<std::string, VarType>(name, VarType(g_typeId++, name, v ,printString, isPointer, isEnum)));
         std::string constName = "const " + name;
-        g_varMap.insert(std::pair<std::string, VarType>(constName, VarType(g_typeId++, constName, v ,printString,isPointer))); //add a const type
+        g_varMap.insert(std::pair<std::string, VarType>(constName, VarType(g_typeId++, constName, v ,printString, isPointer, isEnum))); //add a const type
     }
     g_initialized = true;
     return 0;
diff --git a/emulator/opengl/host/tools/emugen/Var.h b/emulator/opengl/host/tools/emugen/Var.h
index 322c66a92..ba840995e 100644
--- a/emulator/opengl/host/tools/emugen/Var.h
+++ b/emulator/opengl/host/tools/emugen/Var.h
@@ -75,6 +75,7 @@ public:
     const std::string & name() const { return m_name; }
     const VarType * type() const { return m_type; }
     bool isPointer() const { return m_type->isPointer(); }
+    bool isEnum() const { return m_type->isEnum(); }
     bool isVoid() const { return ((m_type->bytes() == 0) && (!m_type->isPointer())); }
     const std::string & lenExpression() const { return m_lenExpression; }
     const std::string & packExpression() const { return(m_packExpression); }
@@ -97,6 +98,7 @@ private:
     std::string m_name;
     const VarType * m_type;
     bool m_pointer; // is this variable a pointer;
+    bool m_enum;    // is this variable an enum;
     std::string m_lenExpression; // an expression to calcualte a pointer data size
     PointerDir m_pointerDir;
     bool m_nullAllowed;
diff --git a/emulator/opengl/host/tools/emugen/VarType.h b/emulator/opengl/host/tools/emugen/VarType.h
index 60562b25c..d797af1b9 100644
--- a/emulator/opengl/host/tools/emugen/VarType.h
+++ b/emulator/opengl/host/tools/emugen/VarType.h
@@ -55,12 +55,12 @@ public:
 class VarType {
 public:
     VarType() :
-        m_id(0), m_name("default_constructed"), m_converter(NULL), m_printFomrat("0x%x"), m_isPointer(false)
+        m_id(0), m_name("default_constructed"), m_converter(NULL), m_printFomrat("0x%x"), m_isPointer(false), m_isEnum(false)
     {
     }
 
-    VarType(size_t id, const std::string & name, const VarConverter * converter, const std::string & printFormat , const bool isPointer) :
-        m_id(id), m_name(name), m_converter(const_cast<VarConverter *>(converter)), m_printFomrat(printFormat), m_isPointer(isPointer)
+    VarType(size_t id, const std::string & name, const VarConverter * converter, const std::string & printFormat , const bool isPointer, const bool isEnum) :
+        m_id(id), m_name(name), m_converter(const_cast<VarConverter *>(converter)), m_printFomrat(printFormat), m_isPointer(isPointer), m_isEnum(isEnum)
     {
     }
 
@@ -71,6 +71,7 @@ public:
     const std::string & printFormat() const { return m_printFomrat; }
     size_t bytes() const { return m_converter->bytes(); }
     bool isPointer() const { return m_isPointer; }
+    bool isEnum() const { return m_isEnum; }
     size_t id() const { return m_id; }
 private:
     size_t m_id;
@@ -78,6 +79,7 @@ private:
     VarConverter * m_converter;
     std::string m_printFomrat;
     bool m_isPointer;
+    bool m_isEnum;
 };
 
 #endif
